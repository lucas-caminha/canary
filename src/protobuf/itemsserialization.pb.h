// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: itemsserialization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_itemsserialization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_itemsserialization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_itemsserialization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_itemsserialization_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_itemsserialization_2eproto;
namespace Canary {
namespace protobuf {
namespace itemsserialization {
class Attribute;
struct AttributeDefaultTypeInternal;
extern AttributeDefaultTypeInternal _Attribute_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemsSerialization;
struct ItemsSerializationDefaultTypeInternal;
extern ItemsSerializationDefaultTypeInternal _ItemsSerialization_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace itemsserialization
}  // namespace protobuf
}  // namespace Canary
PROTOBUF_NAMESPACE_OPEN
template<> ::Canary::protobuf::itemsserialization::Attribute* Arena::CreateMaybeMessage<::Canary::protobuf::itemsserialization::Attribute>(Arena*);
template<> ::Canary::protobuf::itemsserialization::Item* Arena::CreateMaybeMessage<::Canary::protobuf::itemsserialization::Item>(Arena*);
template<> ::Canary::protobuf::itemsserialization::ItemsSerialization* Arena::CreateMaybeMessage<::Canary::protobuf::itemsserialization::ItemsSerialization>(Arena*);
template<> ::Canary::protobuf::itemsserialization::Position* Arena::CreateMaybeMessage<::Canary::protobuf::itemsserialization::Position>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Canary {
namespace protobuf {
namespace itemsserialization {

enum ATTRIBUTE_TYPE : int {
  ATTRIBUTE_TYPE_STRING = 0,
  ATTRIBUTE_TYPE_NUMERIC = 1,
  ATTRIBUTE_TYPE_FLOAT = 2,
  ATTRIBUTE_TYPE_BOOLEAN = 3,
  ATTRIBUTE_TYPE_POSITION = 4
};
bool ATTRIBUTE_TYPE_IsValid(int value);
constexpr ATTRIBUTE_TYPE ATTRIBUTE_TYPE_MIN = ATTRIBUTE_TYPE_STRING;
constexpr ATTRIBUTE_TYPE ATTRIBUTE_TYPE_MAX = ATTRIBUTE_TYPE_POSITION;
constexpr int ATTRIBUTE_TYPE_ARRAYSIZE = ATTRIBUTE_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ATTRIBUTE_TYPE_descriptor();
template<typename T>
inline const std::string& ATTRIBUTE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ATTRIBUTE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ATTRIBUTE_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ATTRIBUTE_TYPE_descriptor(), enum_t_value);
}
inline bool ATTRIBUTE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ATTRIBUTE_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ATTRIBUTE_TYPE>(
    ATTRIBUTE_TYPE_descriptor(), name, value);
}
// ===================================================================

class ItemsSerialization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.itemsserialization.ItemsSerialization) */ {
 public:
  inline ItemsSerialization() : ItemsSerialization(nullptr) {}
  ~ItemsSerialization() override;
  explicit PROTOBUF_CONSTEXPR ItemsSerialization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemsSerialization(const ItemsSerialization& from);
  ItemsSerialization(ItemsSerialization&& from) noexcept
    : ItemsSerialization() {
    *this = ::std::move(from);
  }

  inline ItemsSerialization& operator=(const ItemsSerialization& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemsSerialization& operator=(ItemsSerialization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemsSerialization& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemsSerialization* internal_default_instance() {
    return reinterpret_cast<const ItemsSerialization*>(
               &_ItemsSerialization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ItemsSerialization& a, ItemsSerialization& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemsSerialization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemsSerialization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemsSerialization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemsSerialization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemsSerialization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemsSerialization& from) {
    ItemsSerialization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemsSerialization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.itemsserialization.ItemsSerialization";
  }
  protected:
  explicit ItemsSerialization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .Canary.protobuf.itemsserialization.Item item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Canary::protobuf::itemsserialization::Item* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Item >*
      mutable_item();
  private:
  const ::Canary::protobuf::itemsserialization::Item& _internal_item(int index) const;
  ::Canary::protobuf::itemsserialization::Item* _internal_add_item();
  public:
  const ::Canary::protobuf::itemsserialization::Item& item(int index) const;
  ::Canary::protobuf::itemsserialization::Item* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Item >&
      item() const;

  // @@protoc_insertion_point(class_scope:Canary.protobuf.itemsserialization.ItemsSerialization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Item > item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_itemsserialization_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.itemsserialization.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.itemsserialization.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // optional uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // optional uint32 z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  uint32_t z() const;
  void set_z(uint32_t value);
  private:
  uint32_t _internal_z() const;
  void _internal_set_z(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.itemsserialization.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t x_;
    uint32_t y_;
    uint32_t z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_itemsserialization_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.itemsserialization.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.itemsserialization.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 5,
    kPidFieldNumber = 1,
    kSidFieldNumber = 2,
    kIdFieldNumber = 3,
    kSubtypeFieldNumber = 4,
  };
  // repeated .Canary.protobuf.itemsserialization.Attribute attribute = 5;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::Canary::protobuf::itemsserialization::Attribute* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Attribute >*
      mutable_attribute();
  private:
  const ::Canary::protobuf::itemsserialization::Attribute& _internal_attribute(int index) const;
  ::Canary::protobuf::itemsserialization::Attribute* _internal_add_attribute();
  public:
  const ::Canary::protobuf::itemsserialization::Attribute& attribute(int index) const;
  ::Canary::protobuf::itemsserialization::Attribute* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Attribute >&
      attribute() const;

  // optional uint32 pid = 1;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional uint32 sid = 2;
  bool has_sid() const;
  private:
  bool _internal_has_sid() const;
  public:
  void clear_sid();
  uint32_t sid() const;
  void set_sid(uint32_t value);
  private:
  uint32_t _internal_sid() const;
  void _internal_set_sid(uint32_t value);
  public:

  // optional uint32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 subtype = 4;
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  uint32_t subtype() const;
  void set_subtype(uint32_t value);
  private:
  uint32_t _internal_subtype() const;
  void _internal_set_subtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.itemsserialization.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Attribute > attribute_;
    uint32_t pid_;
    uint32_t sid_;
    uint32_t id_;
    uint32_t subtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_itemsserialization_2eproto;
};
// -------------------------------------------------------------------

class Attribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.itemsserialization.Attribute) */ {
 public:
  inline Attribute() : Attribute(nullptr) {}
  ~Attribute() override;
  explicit PROTOBUF_CONSTEXPR Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attribute(const Attribute& from);
  Attribute(Attribute&& from) noexcept
    : Attribute() {
    *this = ::std::move(from);
  }

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attribute& operator=(Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attribute* internal_default_instance() {
    return reinterpret_cast<const Attribute*>(
               &_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Attribute& a, Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attribute& from) {
    Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.itemsserialization.Attribute";
  }
  protected:
  explicit Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtendedFieldNumber = 3,
    kDataFieldNumber = 4,
    kPositionFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional bytes extended = 3;
  bool has_extended() const;
  private:
  bool _internal_has_extended() const;
  public:
  void clear_extended();
  const std::string& extended() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extended(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extended();
  PROTOBUF_NODISCARD std::string* release_extended();
  void set_allocated_extended(std::string* extended);
  private:
  const std::string& _internal_extended() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extended(const std::string& value);
  std::string* _internal_mutable_extended();
  public:

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .Canary.protobuf.itemsserialization.Position position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Canary::protobuf::itemsserialization::Position& position() const;
  PROTOBUF_NODISCARD ::Canary::protobuf::itemsserialization::Position* release_position();
  ::Canary::protobuf::itemsserialization::Position* mutable_position();
  void set_allocated_position(::Canary::protobuf::itemsserialization::Position* position);
  private:
  const ::Canary::protobuf::itemsserialization::Position& _internal_position() const;
  ::Canary::protobuf::itemsserialization::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Canary::protobuf::itemsserialization::Position* position);
  ::Canary::protobuf::itemsserialization::Position* unsafe_arena_release_position();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional .Canary.protobuf.itemsserialization.ATTRIBUTE_TYPE type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE type() const;
  void set_type(::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE value);
  private:
  ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE _internal_type() const;
  void _internal_set_type(::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.itemsserialization.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extended_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::Canary::protobuf::itemsserialization::Position* position_;
    uint32_t id_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_itemsserialization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ItemsSerialization

// repeated .Canary.protobuf.itemsserialization.Item item = 1;
inline int ItemsSerialization::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int ItemsSerialization::item_size() const {
  return _internal_item_size();
}
inline void ItemsSerialization::clear_item() {
  _impl_.item_.Clear();
}
inline ::Canary::protobuf::itemsserialization::Item* ItemsSerialization::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.itemsserialization.ItemsSerialization.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Item >*
ItemsSerialization::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.itemsserialization.ItemsSerialization.item)
  return &_impl_.item_;
}
inline const ::Canary::protobuf::itemsserialization::Item& ItemsSerialization::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Canary::protobuf::itemsserialization::Item& ItemsSerialization::item(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.ItemsSerialization.item)
  return _internal_item(index);
}
inline ::Canary::protobuf::itemsserialization::Item* ItemsSerialization::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Canary::protobuf::itemsserialization::Item* ItemsSerialization::add_item() {
  ::Canary::protobuf::itemsserialization::Item* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Canary.protobuf.itemsserialization.ItemsSerialization.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Item >&
ItemsSerialization::item() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.itemsserialization.ItemsSerialization.item)
  return _impl_.item_;
}

// -------------------------------------------------------------------

// Position

// optional uint32 x = 1;
inline bool Position::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_x() const {
  return _internal_has_x();
}
inline void Position::clear_x() {
  _impl_.x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Position::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t Position::x() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Position::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Position.x)
}

// optional uint32 y = 2;
inline bool Position::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_y() const {
  return _internal_has_y();
}
inline void Position::clear_y() {
  _impl_.y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Position::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t Position::y() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Position::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Position.y)
}

// optional uint32 z = 3;
inline bool Position::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Position::has_z() const {
  return _internal_has_z();
}
inline void Position::clear_z() {
  _impl_.z_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Position::_internal_z() const {
  return _impl_.z_;
}
inline uint32_t Position::z() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Position::set_z(uint32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Position.z)
}

// -------------------------------------------------------------------

// Item

// optional uint32 pid = 1;
inline bool Item::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Item::has_pid() const {
  return _internal_has_pid();
}
inline void Item::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Item::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t Item::pid() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Item.pid)
  return _internal_pid();
}
inline void Item::_internal_set_pid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pid_ = value;
}
inline void Item::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Item.pid)
}

// optional uint32 sid = 2;
inline bool Item::_internal_has_sid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Item::has_sid() const {
  return _internal_has_sid();
}
inline void Item::clear_sid() {
  _impl_.sid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Item::_internal_sid() const {
  return _impl_.sid_;
}
inline uint32_t Item::sid() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Item.sid)
  return _internal_sid();
}
inline void Item::_internal_set_sid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sid_ = value;
}
inline void Item::set_sid(uint32_t value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Item.sid)
}

// optional uint32 id = 3;
inline bool Item::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Item::has_id() const {
  return _internal_has_id();
}
inline void Item::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Item::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Item::id() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Item.id)
  return _internal_id();
}
inline void Item::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void Item::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Item.id)
}

// optional uint32 subtype = 4;
inline bool Item::_internal_has_subtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Item::has_subtype() const {
  return _internal_has_subtype();
}
inline void Item::clear_subtype() {
  _impl_.subtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Item::_internal_subtype() const {
  return _impl_.subtype_;
}
inline uint32_t Item::subtype() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Item.subtype)
  return _internal_subtype();
}
inline void Item::_internal_set_subtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.subtype_ = value;
}
inline void Item::set_subtype(uint32_t value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Item.subtype)
}

// repeated .Canary.protobuf.itemsserialization.Attribute attribute = 5;
inline int Item::_internal_attribute_size() const {
  return _impl_.attribute_.size();
}
inline int Item::attribute_size() const {
  return _internal_attribute_size();
}
inline void Item::clear_attribute() {
  _impl_.attribute_.Clear();
}
inline ::Canary::protobuf::itemsserialization::Attribute* Item::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.itemsserialization.Item.attribute)
  return _impl_.attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Attribute >*
Item::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.itemsserialization.Item.attribute)
  return &_impl_.attribute_;
}
inline const ::Canary::protobuf::itemsserialization::Attribute& Item::_internal_attribute(int index) const {
  return _impl_.attribute_.Get(index);
}
inline const ::Canary::protobuf::itemsserialization::Attribute& Item::attribute(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Item.attribute)
  return _internal_attribute(index);
}
inline ::Canary::protobuf::itemsserialization::Attribute* Item::_internal_add_attribute() {
  return _impl_.attribute_.Add();
}
inline ::Canary::protobuf::itemsserialization::Attribute* Item::add_attribute() {
  ::Canary::protobuf::itemsserialization::Attribute* _add = _internal_add_attribute();
  // @@protoc_insertion_point(field_add:Canary.protobuf.itemsserialization.Item.attribute)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::itemsserialization::Attribute >&
Item::attribute() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.itemsserialization.Item.attribute)
  return _impl_.attribute_;
}

// -------------------------------------------------------------------

// Attribute

// optional uint32 id = 1;
inline bool Attribute::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Attribute::has_id() const {
  return _internal_has_id();
}
inline void Attribute::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Attribute::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Attribute::id() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Attribute.id)
  return _internal_id();
}
inline void Attribute::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.id_ = value;
}
inline void Attribute::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Attribute.id)
}

// optional .Canary.protobuf.itemsserialization.ATTRIBUTE_TYPE type = 2;
inline bool Attribute::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Attribute::has_type() const {
  return _internal_has_type();
}
inline void Attribute::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE Attribute::_internal_type() const {
  return static_cast< ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE >(_impl_.type_);
}
inline ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE Attribute::type() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Attribute.type)
  return _internal_type();
}
inline void Attribute::_internal_set_type(::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE value) {
  assert(::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void Attribute::set_type(::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Attribute.type)
}

// optional bytes extended = 3;
inline bool Attribute::_internal_has_extended() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Attribute::has_extended() const {
  return _internal_has_extended();
}
inline void Attribute::clear_extended() {
  _impl_.extended_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Attribute::extended() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Attribute.extended)
  return _internal_extended();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attribute::set_extended(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.extended_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Attribute.extended)
}
inline std::string* Attribute::mutable_extended() {
  std::string* _s = _internal_mutable_extended();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.itemsserialization.Attribute.extended)
  return _s;
}
inline const std::string& Attribute::_internal_extended() const {
  return _impl_.extended_.Get();
}
inline void Attribute::_internal_set_extended(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.extended_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_extended() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.extended_.Mutable(GetArenaForAllocation());
}
inline std::string* Attribute::release_extended() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.itemsserialization.Attribute.extended)
  if (!_internal_has_extended()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.extended_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extended_.IsDefault()) {
    _impl_.extended_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Attribute::set_allocated_extended(std::string* extended) {
  if (extended != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.extended_.SetAllocated(extended, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extended_.IsDefault()) {
    _impl_.extended_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.itemsserialization.Attribute.extended)
}

// optional bytes data = 4;
inline bool Attribute::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Attribute::has_data() const {
  return _internal_has_data();
}
inline void Attribute::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Attribute::data() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Attribute.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Attribute::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Canary.protobuf.itemsserialization.Attribute.data)
}
inline std::string* Attribute::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.itemsserialization.Attribute.data)
  return _s;
}
inline const std::string& Attribute::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Attribute::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Attribute::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Attribute::release_data() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.itemsserialization.Attribute.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Attribute::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.itemsserialization.Attribute.data)
}

// optional .Canary.protobuf.itemsserialization.Position position = 5;
inline bool Attribute::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool Attribute::has_position() const {
  return _internal_has_position();
}
inline void Attribute::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Canary::protobuf::itemsserialization::Position& Attribute::_internal_position() const {
  const ::Canary::protobuf::itemsserialization::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Canary::protobuf::itemsserialization::Position&>(
      ::Canary::protobuf::itemsserialization::_Position_default_instance_);
}
inline const ::Canary::protobuf::itemsserialization::Position& Attribute::position() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.itemsserialization.Attribute.position)
  return _internal_position();
}
inline void Attribute::unsafe_arena_set_allocated_position(
    ::Canary::protobuf::itemsserialization::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Canary.protobuf.itemsserialization.Attribute.position)
}
inline ::Canary::protobuf::itemsserialization::Position* Attribute::release_position() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Canary::protobuf::itemsserialization::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Canary::protobuf::itemsserialization::Position* Attribute::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Canary.protobuf.itemsserialization.Attribute.position)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Canary::protobuf::itemsserialization::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Canary::protobuf::itemsserialization::Position* Attribute::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Canary::protobuf::itemsserialization::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Canary::protobuf::itemsserialization::Position* Attribute::mutable_position() {
  ::Canary::protobuf::itemsserialization::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.itemsserialization.Attribute.position)
  return _msg;
}
inline void Attribute::set_allocated_position(::Canary::protobuf::itemsserialization::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Canary.protobuf.itemsserialization.Attribute.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace itemsserialization
}  // namespace protobuf
}  // namespace Canary

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE>() {
  return ::Canary::protobuf::itemsserialization::ATTRIBUTE_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_itemsserialization_2eproto
