// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playersystems.proto

#include "playersystems.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Canary {
namespace protobuf {
namespace playersystems {
PROTOBUF_CONSTEXPR PlayerSystems::PlayerSystems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.charms_)*/{}
  , /*decltype(_impl_.prey_)*/{}
  , /*decltype(_impl_.task_hunting_)*/{}
  , /*decltype(_impl_.bestiary_tracker_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSystemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSystemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSystemsDefaultTypeInternal() {}
  union {
    PlayerSystems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSystemsDefaultTypeInternal _PlayerSystems_default_instance_;
PROTOBUF_CONSTEXPR Charm::Charm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.raceid_)*/0u} {}
struct CharmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharmDefaultTypeInternal() {}
  union {
    Charm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharmDefaultTypeInternal _Charm_default_instance_;
PROTOBUF_CONSTEXPR Prey::Prey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grid_)*/{}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_.raceid_)*/0u
  , /*decltype(_impl_.option_)*/0u
  , /*decltype(_impl_.bonus_type_)*/0u
  , /*decltype(_impl_.bonus_rarity_)*/0u
  , /*decltype(_impl_.bonus_percentage_)*/0u
  , /*decltype(_impl_.bonus_time_)*/0u
  , /*decltype(_impl_.free_reroll_)*/uint64_t{0u}} {}
struct PreyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreyDefaultTypeInternal() {}
  union {
    Prey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreyDefaultTypeInternal _Prey_default_instance_;
PROTOBUF_CONSTEXPR TaskHunting::TaskHunting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grid_)*/{}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.state_)*/0u
  , /*decltype(_impl_.raceid_)*/0u
  , /*decltype(_impl_.upgrade_)*/false
  , /*decltype(_impl_.rarity_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.disable_time_)*/uint64_t{0u}
  , /*decltype(_impl_.free_reroll_)*/uint64_t{0u}} {}
struct TaskHuntingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskHuntingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskHuntingDefaultTypeInternal() {}
  union {
    TaskHunting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskHuntingDefaultTypeInternal _TaskHunting_default_instance_;
}  // namespace playersystems
}  // namespace protobuf
}  // namespace Canary
static ::_pb::Metadata file_level_metadata_playersystems_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_playersystems_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_playersystems_2eproto = nullptr;

const uint32_t TableStruct_playersystems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::PlayerSystems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::PlayerSystems, _impl_.charms_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::PlayerSystems, _impl_.prey_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::PlayerSystems, _impl_.task_hunting_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::PlayerSystems, _impl_.bestiary_tracker_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Charm, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Charm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Charm, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Charm, _impl_.raceid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.raceid_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.option_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.bonus_type_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.bonus_rarity_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.bonus_percentage_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.bonus_time_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.free_reroll_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::Prey, _impl_.grid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.raceid_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.upgrade_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.disable_time_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.free_reroll_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::playersystems::TaskHunting, _impl_.grid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Canary::protobuf::playersystems::PlayerSystems)},
  { 10, 18, -1, sizeof(::Canary::protobuf::playersystems::Charm)},
  { 20, 36, -1, sizeof(::Canary::protobuf::playersystems::Prey)},
  { 46, 61, -1, sizeof(::Canary::protobuf::playersystems::TaskHunting)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Canary::protobuf::playersystems::_PlayerSystems_default_instance_._instance,
  &::Canary::protobuf::playersystems::_Charm_default_instance_._instance,
  &::Canary::protobuf::playersystems::_Prey_default_instance_._instance,
  &::Canary::protobuf::playersystems::_TaskHunting_default_instance_._instance,
};

const char descriptor_table_protodef_playersystems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023playersystems.proto\022\035Canary.protobuf.p"
  "layersystems\"\324\001\n\rPlayerSystems\0224\n\006charms"
  "\030\001 \003(\0132$.Canary.protobuf.playersystems.C"
  "harm\0221\n\004prey\030\002 \003(\0132#.Canary.protobuf.pla"
  "yersystems.Prey\022@\n\014task_hunting\030\003 \003(\0132*."
  "Canary.protobuf.playersystems.TaskHuntin"
  "g\022\030\n\020bestiary_tracker\030\004 \003(\r\"P\n\005Charm\0227\n\004"
  "type\030\001 \001(\0162).Canary.protobuf.playersyste"
  "ms.CHARM_TYPE\022\016\n\006raceid\030\002 \001(\r\"\276\001\n\004Prey\022\014"
  "\n\004slot\030\001 \001(\r\022\r\n\005state\030\002 \001(\r\022\016\n\006raceid\030\003 "
  "\001(\r\022\016\n\006option\030\004 \001(\r\022\022\n\nbonus_type\030\005 \001(\r\022"
  "\024\n\014bonus_rarity\030\006 \001(\r\022\030\n\020bonus_percentag"
  "e\030\007 \001(\r\022\022\n\nbonus_time\030\010 \001(\r\022\023\n\013free_rero"
  "ll\030\t \001(\004\022\014\n\004grid\030\n \003(\r\"\243\001\n\013TaskHunting\022\014"
  "\n\004slot\030\001 \001(\r\022\r\n\005state\030\002 \001(\r\022\016\n\006raceid\030\003 "
  "\001(\r\022\017\n\007upgrade\030\004 \001(\010\022\016\n\006rarity\030\005 \001(\r\022\r\n\005"
  "kills\030\006 \001(\r\022\024\n\014disable_time\030\007 \001(\004\022\023\n\013fre"
  "e_reroll\030\010 \001(\004\022\014\n\004grid\030\t \003(\r*\351\003\n\nCHARM_T"
  "YPE\022\023\n\017CHARM_TYPE_USED\020\000\022\027\n\023CHARM_TYPE_U"
  "NLOCKED\020\001\022\024\n\020CHARM_TYPE_WOUND\020\002\022\026\n\022CHARM"
  "_TYPE_ENFLAME\020\003\022\025\n\021CHARM_TYPE_POISON\020\004\022\025"
  "\n\021CHARM_TYPE_FREEZE\020\005\022\022\n\016CHARM_TYPE_ZAP\020"
  "\006\022\024\n\020CHARM_TYPE_CURSE\020\007\022\026\n\022CHARM_TYPE_CR"
  "IPPLE\020\010\022\024\n\020CHARM_TYPE_PARRY\020\t\022\024\n\020CHARM_T"
  "YPE_DODGE\020\n\022\031\n\025CHARM_TYPE_ADRENALINE\020\013\022\023"
  "\n\017CHARM_TYPE_NUMB\020\014\022\026\n\022CHARM_TYPE_CLEANS"
  "E\020\r\022\024\n\020CHARM_TYPE_BLESS\020\016\022\027\n\023CHARM_TYPE_"
  "SCAVENGE\020\017\022\022\n\016CHARM_TYPE_GUT\020\020\022\027\n\023CHARM_"
  "TYPE_LOW_BLOW\020\021\022\025\n\021CHARM_TYPE_DIVINE\020\022\022\023"
  "\n\017CHARM_TYPE_VAMP\020\023\022\023\n\017CHARM_TYPE_VOID\020\024"
  ;
static ::_pbi::once_flag descriptor_table_playersystems_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_playersystems_2eproto = {
    false, false, 1200, descriptor_table_protodef_playersystems_2eproto,
    "playersystems.proto",
    &descriptor_table_playersystems_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_playersystems_2eproto::offsets,
    file_level_metadata_playersystems_2eproto, file_level_enum_descriptors_playersystems_2eproto,
    file_level_service_descriptors_playersystems_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_playersystems_2eproto_getter() {
  return &descriptor_table_playersystems_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_playersystems_2eproto(&descriptor_table_playersystems_2eproto);
namespace Canary {
namespace protobuf {
namespace playersystems {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHARM_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_playersystems_2eproto);
  return file_level_enum_descriptors_playersystems_2eproto[0];
}
bool CHARM_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlayerSystems::_Internal {
 public:
};

PlayerSystems::PlayerSystems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.playersystems.PlayerSystems)
}
PlayerSystems::PlayerSystems(const PlayerSystems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSystems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.charms_){from._impl_.charms_}
    , decltype(_impl_.prey_){from._impl_.prey_}
    , decltype(_impl_.task_hunting_){from._impl_.task_hunting_}
    , decltype(_impl_.bestiary_tracker_){from._impl_.bestiary_tracker_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.playersystems.PlayerSystems)
}

inline void PlayerSystems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.charms_){arena}
    , decltype(_impl_.prey_){arena}
    , decltype(_impl_.task_hunting_){arena}
    , decltype(_impl_.bestiary_tracker_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerSystems::~PlayerSystems() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.playersystems.PlayerSystems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSystems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.charms_.~RepeatedPtrField();
  _impl_.prey_.~RepeatedPtrField();
  _impl_.task_hunting_.~RepeatedPtrField();
  _impl_.bestiary_tracker_.~RepeatedField();
}

void PlayerSystems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSystems::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.playersystems.PlayerSystems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charms_.Clear();
  _impl_.prey_.Clear();
  _impl_.task_hunting_.Clear();
  _impl_.bestiary_tracker_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSystems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Canary.protobuf.playersystems.Charm charms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.playersystems.Prey prey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prey(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.playersystems.TaskHunting task_hunting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_hunting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 bestiary_tracker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bestiary_tracker(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bestiary_tracker(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSystems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.playersystems.PlayerSystems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Canary.protobuf.playersystems.Charm charms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_charms_size()); i < n; i++) {
    const auto& repfield = this->_internal_charms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Canary.protobuf.playersystems.Prey prey = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prey_size()); i < n; i++) {
    const auto& repfield = this->_internal_prey(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Canary.protobuf.playersystems.TaskHunting task_hunting = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_hunting_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_hunting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 bestiary_tracker = 4;
  for (int i = 0, n = this->_internal_bestiary_tracker_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bestiary_tracker(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.playersystems.PlayerSystems)
  return target;
}

size_t PlayerSystems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.playersystems.PlayerSystems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.playersystems.Charm charms = 1;
  total_size += 1UL * this->_internal_charms_size();
  for (const auto& msg : this->_impl_.charms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Canary.protobuf.playersystems.Prey prey = 2;
  total_size += 1UL * this->_internal_prey_size();
  for (const auto& msg : this->_impl_.prey_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Canary.protobuf.playersystems.TaskHunting task_hunting = 3;
  total_size += 1UL * this->_internal_task_hunting_size();
  for (const auto& msg : this->_impl_.task_hunting_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 bestiary_tracker = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.bestiary_tracker_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bestiary_tracker_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSystems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSystems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSystems::GetClassData() const { return &_class_data_; }


void PlayerSystems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSystems*>(&to_msg);
  auto& from = static_cast<const PlayerSystems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.playersystems.PlayerSystems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.charms_.MergeFrom(from._impl_.charms_);
  _this->_impl_.prey_.MergeFrom(from._impl_.prey_);
  _this->_impl_.task_hunting_.MergeFrom(from._impl_.task_hunting_);
  _this->_impl_.bestiary_tracker_.MergeFrom(from._impl_.bestiary_tracker_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSystems::CopyFrom(const PlayerSystems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.playersystems.PlayerSystems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSystems::IsInitialized() const {
  return true;
}

void PlayerSystems::InternalSwap(PlayerSystems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.charms_.InternalSwap(&other->_impl_.charms_);
  _impl_.prey_.InternalSwap(&other->_impl_.prey_);
  _impl_.task_hunting_.InternalSwap(&other->_impl_.task_hunting_);
  _impl_.bestiary_tracker_.InternalSwap(&other->_impl_.bestiary_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSystems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_playersystems_2eproto_getter, &descriptor_table_playersystems_2eproto_once,
      file_level_metadata_playersystems_2eproto[0]);
}

// ===================================================================

class Charm::_Internal {
 public:
  using HasBits = decltype(std::declval<Charm>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_raceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Charm::Charm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.playersystems.Charm)
}
Charm::Charm(const Charm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Charm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.raceid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.raceid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.raceid_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.playersystems.Charm)
}

inline void Charm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.raceid_){0u}
  };
}

Charm::~Charm() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.playersystems.Charm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Charm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Charm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Charm::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.playersystems.Charm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.raceid_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.raceid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Charm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Canary.protobuf.playersystems.CHARM_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::playersystems::CHARM_TYPE_IsValid(val))) {
            _internal_set_type(static_cast<::Canary::protobuf::playersystems::CHARM_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raceid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_raceid(&has_bits);
          _impl_.raceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Charm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.playersystems.Charm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Canary.protobuf.playersystems.CHARM_TYPE type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 raceid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_raceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.playersystems.Charm)
  return target;
}

size_t Charm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.playersystems.Charm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Canary.protobuf.playersystems.CHARM_TYPE type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 raceid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raceid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Charm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Charm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Charm::GetClassData() const { return &_class_data_; }


void Charm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Charm*>(&to_msg);
  auto& from = static_cast<const Charm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.playersystems.Charm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.raceid_ = from._impl_.raceid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Charm::CopyFrom(const Charm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.playersystems.Charm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charm::IsInitialized() const {
  return true;
}

void Charm::InternalSwap(Charm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Charm, _impl_.raceid_)
      + sizeof(Charm::_impl_.raceid_)
      - PROTOBUF_FIELD_OFFSET(Charm, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Charm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_playersystems_2eproto_getter, &descriptor_table_playersystems_2eproto_once,
      file_level_metadata_playersystems_2eproto[1]);
}

// ===================================================================

class Prey::_Internal {
 public:
  using HasBits = decltype(std::declval<Prey>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_option(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bonus_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bonus_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bonus_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bonus_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_free_reroll(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

Prey::Prey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.playersystems.Prey)
}
Prey::Prey(const Prey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Prey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grid_){from._impl_.grid_}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.raceid_){}
    , decltype(_impl_.option_){}
    , decltype(_impl_.bonus_type_){}
    , decltype(_impl_.bonus_rarity_){}
    , decltype(_impl_.bonus_percentage_){}
    , decltype(_impl_.bonus_time_){}
    , decltype(_impl_.free_reroll_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_, &from._impl_.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.free_reroll_) -
    reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.free_reroll_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.playersystems.Prey)
}

inline void Prey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grid_){arena}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.state_){0u}
    , decltype(_impl_.raceid_){0u}
    , decltype(_impl_.option_){0u}
    , decltype(_impl_.bonus_type_){0u}
    , decltype(_impl_.bonus_rarity_){0u}
    , decltype(_impl_.bonus_percentage_){0u}
    , decltype(_impl_.bonus_time_){0u}
    , decltype(_impl_.free_reroll_){uint64_t{0u}}
  };
}

Prey::~Prey() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.playersystems.Prey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Prey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grid_.~RepeatedField();
}

void Prey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Prey::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.playersystems.Prey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bonus_time_) -
        reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.bonus_time_));
  }
  _impl_.free_reroll_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_raceid(&has_bits);
          _impl_.raceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 option = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_option(&has_bits);
          _impl_.option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bonus_type(&has_bits);
          _impl_.bonus_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_rarity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bonus_rarity(&has_bits);
          _impl_.bonus_rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_percentage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_bonus_percentage(&has_bits);
          _impl_.bonus_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_bonus_time(&has_bits);
          _impl_.bonus_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 free_reroll = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_free_reroll(&has_bits);
          _impl_.free_reroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 grid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_grid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_grid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Prey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.playersystems.Prey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // optional uint32 raceid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_raceid(), target);
  }

  // optional uint32 option = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_option(), target);
  }

  // optional uint32 bonus_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bonus_type(), target);
  }

  // optional uint32 bonus_rarity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bonus_rarity(), target);
  }

  // optional uint32 bonus_percentage = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bonus_percentage(), target);
  }

  // optional uint32 bonus_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bonus_time(), target);
  }

  // optional uint64 free_reroll = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_free_reroll(), target);
  }

  // repeated uint32 grid = 10;
  for (int i = 0, n = this->_internal_grid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_grid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.playersystems.Prey)
  return target;
}

size_t Prey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.playersystems.Prey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 grid = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.grid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_grid_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
    }

    // optional uint32 raceid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raceid());
    }

    // optional uint32 option = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_option());
    }

    // optional uint32 bonus_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_type());
    }

    // optional uint32 bonus_rarity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_rarity());
    }

    // optional uint32 bonus_percentage = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_percentage());
    }

    // optional uint32 bonus_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_time());
    }

  }
  // optional uint64 free_reroll = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_free_reroll());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Prey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prey::GetClassData() const { return &_class_data_; }


void Prey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Prey*>(&to_msg);
  auto& from = static_cast<const Prey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.playersystems.Prey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grid_.MergeFrom(from._impl_.grid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.raceid_ = from._impl_.raceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.option_ = from._impl_.option_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bonus_type_ = from._impl_.bonus_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bonus_rarity_ = from._impl_.bonus_rarity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bonus_percentage_ = from._impl_.bonus_percentage_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.bonus_time_ = from._impl_.bonus_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_free_reroll(from._internal_free_reroll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prey::CopyFrom(const Prey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.playersystems.Prey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prey::IsInitialized() const {
  return true;
}

void Prey::InternalSwap(Prey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.grid_.InternalSwap(&other->_impl_.grid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prey, _impl_.free_reroll_)
      + sizeof(Prey::_impl_.free_reroll_)
      - PROTOBUF_FIELD_OFFSET(Prey, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_playersystems_2eproto_getter, &descriptor_table_playersystems_2eproto_once,
      file_level_metadata_playersystems_2eproto[2]);
}

// ===================================================================

class TaskHunting::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskHunting>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_raceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_disable_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_free_reroll(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

TaskHunting::TaskHunting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.playersystems.TaskHunting)
}
TaskHunting::TaskHunting(const TaskHunting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskHunting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grid_){from._impl_.grid_}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.raceid_){}
    , decltype(_impl_.upgrade_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.disable_time_){}
    , decltype(_impl_.free_reroll_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_, &from._impl_.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.free_reroll_) -
    reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.free_reroll_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.playersystems.TaskHunting)
}

inline void TaskHunting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grid_){arena}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.state_){0u}
    , decltype(_impl_.raceid_){0u}
    , decltype(_impl_.upgrade_){false}
    , decltype(_impl_.rarity_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.disable_time_){uint64_t{0u}}
    , decltype(_impl_.free_reroll_){uint64_t{0u}}
  };
}

TaskHunting::~TaskHunting() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.playersystems.TaskHunting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskHunting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grid_.~RepeatedField();
}

void TaskHunting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.playersystems.TaskHunting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.free_reroll_) -
        reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.free_reroll_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskHunting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 raceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_raceid(&has_bits);
          _impl_.raceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool upgrade = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_upgrade(&has_bits);
          _impl_.upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          _impl_.rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 disable_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_disable_time(&has_bits);
          _impl_.disable_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 free_reroll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_free_reroll(&has_bits);
          _impl_.free_reroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 grid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_grid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_grid(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskHunting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.playersystems.TaskHunting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // optional uint32 raceid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_raceid(), target);
  }

  // optional bool upgrade = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_upgrade(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint64 disable_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_disable_time(), target);
  }

  // optional uint64 free_reroll = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_free_reroll(), target);
  }

  // repeated uint32 grid = 9;
  for (int i = 0, n = this->_internal_grid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_grid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.playersystems.TaskHunting)
  return target;
}

size_t TaskHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.playersystems.TaskHunting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 grid = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.grid_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_grid_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_state());
    }

    // optional uint32 raceid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raceid());
    }

    // optional bool upgrade = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rarity());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint64 disable_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_disable_time());
    }

    // optional uint64 free_reroll = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_free_reroll());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskHunting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskHunting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskHunting::GetClassData() const { return &_class_data_; }


void TaskHunting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskHunting*>(&to_msg);
  auto& from = static_cast<const TaskHunting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.playersystems.TaskHunting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grid_.MergeFrom(from._impl_.grid_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.raceid_ = from._impl_.raceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.upgrade_ = from._impl_.upgrade_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.disable_time_ = from._impl_.disable_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.free_reroll_ = from._impl_.free_reroll_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskHunting::CopyFrom(const TaskHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.playersystems.TaskHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskHunting::IsInitialized() const {
  return true;
}

void TaskHunting::InternalSwap(TaskHunting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.grid_.InternalSwap(&other->_impl_.grid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskHunting, _impl_.free_reroll_)
      + sizeof(TaskHunting::_impl_.free_reroll_)
      - PROTOBUF_FIELD_OFFSET(TaskHunting, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskHunting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_playersystems_2eproto_getter, &descriptor_table_playersystems_2eproto_once,
      file_level_metadata_playersystems_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace playersystems
}  // namespace protobuf
}  // namespace Canary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Canary::protobuf::playersystems::PlayerSystems*
Arena::CreateMaybeMessage< ::Canary::protobuf::playersystems::PlayerSystems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::playersystems::PlayerSystems >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::playersystems::Charm*
Arena::CreateMaybeMessage< ::Canary::protobuf::playersystems::Charm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::playersystems::Charm >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::playersystems::Prey*
Arena::CreateMaybeMessage< ::Canary::protobuf::playersystems::Prey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::playersystems::Prey >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::playersystems::TaskHunting*
Arena::CreateMaybeMessage< ::Canary::protobuf::playersystems::TaskHunting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::playersystems::TaskHunting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
