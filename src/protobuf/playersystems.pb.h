// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playersystems.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_playersystems_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_playersystems_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_playersystems_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_playersystems_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_playersystems_2eproto;
namespace Canary {
namespace protobuf {
namespace playersystems {
class Charm;
struct CharmDefaultTypeInternal;
extern CharmDefaultTypeInternal _Charm_default_instance_;
class PlayerSystems;
struct PlayerSystemsDefaultTypeInternal;
extern PlayerSystemsDefaultTypeInternal _PlayerSystems_default_instance_;
class Prey;
struct PreyDefaultTypeInternal;
extern PreyDefaultTypeInternal _Prey_default_instance_;
class TaskHunting;
struct TaskHuntingDefaultTypeInternal;
extern TaskHuntingDefaultTypeInternal _TaskHunting_default_instance_;
}  // namespace playersystems
}  // namespace protobuf
}  // namespace Canary
PROTOBUF_NAMESPACE_OPEN
template<> ::Canary::protobuf::playersystems::Charm* Arena::CreateMaybeMessage<::Canary::protobuf::playersystems::Charm>(Arena*);
template<> ::Canary::protobuf::playersystems::PlayerSystems* Arena::CreateMaybeMessage<::Canary::protobuf::playersystems::PlayerSystems>(Arena*);
template<> ::Canary::protobuf::playersystems::Prey* Arena::CreateMaybeMessage<::Canary::protobuf::playersystems::Prey>(Arena*);
template<> ::Canary::protobuf::playersystems::TaskHunting* Arena::CreateMaybeMessage<::Canary::protobuf::playersystems::TaskHunting>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Canary {
namespace protobuf {
namespace playersystems {

enum CHARM_TYPE : int {
  CHARM_TYPE_USED = 0,
  CHARM_TYPE_UNLOCKED = 1,
  CHARM_TYPE_WOUND = 2,
  CHARM_TYPE_ENFLAME = 3,
  CHARM_TYPE_POISON = 4,
  CHARM_TYPE_FREEZE = 5,
  CHARM_TYPE_ZAP = 6,
  CHARM_TYPE_CURSE = 7,
  CHARM_TYPE_CRIPPLE = 8,
  CHARM_TYPE_PARRY = 9,
  CHARM_TYPE_DODGE = 10,
  CHARM_TYPE_ADRENALINE = 11,
  CHARM_TYPE_NUMB = 12,
  CHARM_TYPE_CLEANSE = 13,
  CHARM_TYPE_BLESS = 14,
  CHARM_TYPE_SCAVENGE = 15,
  CHARM_TYPE_GUT = 16,
  CHARM_TYPE_LOW_BLOW = 17,
  CHARM_TYPE_DIVINE = 18,
  CHARM_TYPE_VAMP = 19,
  CHARM_TYPE_VOID = 20
};
bool CHARM_TYPE_IsValid(int value);
constexpr CHARM_TYPE CHARM_TYPE_MIN = CHARM_TYPE_USED;
constexpr CHARM_TYPE CHARM_TYPE_MAX = CHARM_TYPE_VOID;
constexpr int CHARM_TYPE_ARRAYSIZE = CHARM_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHARM_TYPE_descriptor();
template<typename T>
inline const std::string& CHARM_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHARM_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHARM_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHARM_TYPE_descriptor(), enum_t_value);
}
inline bool CHARM_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHARM_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHARM_TYPE>(
    CHARM_TYPE_descriptor(), name, value);
}
// ===================================================================

class PlayerSystems final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.playersystems.PlayerSystems) */ {
 public:
  inline PlayerSystems() : PlayerSystems(nullptr) {}
  ~PlayerSystems() override;
  explicit PROTOBUF_CONSTEXPR PlayerSystems(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSystems(const PlayerSystems& from);
  PlayerSystems(PlayerSystems&& from) noexcept
    : PlayerSystems() {
    *this = ::std::move(from);
  }

  inline PlayerSystems& operator=(const PlayerSystems& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSystems& operator=(PlayerSystems&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSystems& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSystems* internal_default_instance() {
    return reinterpret_cast<const PlayerSystems*>(
               &_PlayerSystems_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerSystems& a, PlayerSystems& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSystems* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSystems* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSystems* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSystems>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSystems& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSystems& from) {
    PlayerSystems::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSystems* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.playersystems.PlayerSystems";
  }
  protected:
  explicit PlayerSystems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharmsFieldNumber = 1,
    kPreyFieldNumber = 2,
    kTaskHuntingFieldNumber = 3,
    kBestiaryTrackerFieldNumber = 4,
  };
  // repeated .Canary.protobuf.playersystems.Charm charms = 1;
  int charms_size() const;
  private:
  int _internal_charms_size() const;
  public:
  void clear_charms();
  ::Canary::protobuf::playersystems::Charm* mutable_charms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Charm >*
      mutable_charms();
  private:
  const ::Canary::protobuf::playersystems::Charm& _internal_charms(int index) const;
  ::Canary::protobuf::playersystems::Charm* _internal_add_charms();
  public:
  const ::Canary::protobuf::playersystems::Charm& charms(int index) const;
  ::Canary::protobuf::playersystems::Charm* add_charms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Charm >&
      charms() const;

  // repeated .Canary.protobuf.playersystems.Prey prey = 2;
  int prey_size() const;
  private:
  int _internal_prey_size() const;
  public:
  void clear_prey();
  ::Canary::protobuf::playersystems::Prey* mutable_prey(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Prey >*
      mutable_prey();
  private:
  const ::Canary::protobuf::playersystems::Prey& _internal_prey(int index) const;
  ::Canary::protobuf::playersystems::Prey* _internal_add_prey();
  public:
  const ::Canary::protobuf::playersystems::Prey& prey(int index) const;
  ::Canary::protobuf::playersystems::Prey* add_prey();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Prey >&
      prey() const;

  // repeated .Canary.protobuf.playersystems.TaskHunting task_hunting = 3;
  int task_hunting_size() const;
  private:
  int _internal_task_hunting_size() const;
  public:
  void clear_task_hunting();
  ::Canary::protobuf::playersystems::TaskHunting* mutable_task_hunting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::TaskHunting >*
      mutable_task_hunting();
  private:
  const ::Canary::protobuf::playersystems::TaskHunting& _internal_task_hunting(int index) const;
  ::Canary::protobuf::playersystems::TaskHunting* _internal_add_task_hunting();
  public:
  const ::Canary::protobuf::playersystems::TaskHunting& task_hunting(int index) const;
  ::Canary::protobuf::playersystems::TaskHunting* add_task_hunting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::TaskHunting >&
      task_hunting() const;

  // repeated uint32 bestiary_tracker = 4;
  int bestiary_tracker_size() const;
  private:
  int _internal_bestiary_tracker_size() const;
  public:
  void clear_bestiary_tracker();
  private:
  uint32_t _internal_bestiary_tracker(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_bestiary_tracker() const;
  void _internal_add_bestiary_tracker(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_bestiary_tracker();
  public:
  uint32_t bestiary_tracker(int index) const;
  void set_bestiary_tracker(int index, uint32_t value);
  void add_bestiary_tracker(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      bestiary_tracker() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_bestiary_tracker();

  // @@protoc_insertion_point(class_scope:Canary.protobuf.playersystems.PlayerSystems)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Charm > charms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Prey > prey_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::TaskHunting > task_hunting_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > bestiary_tracker_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playersystems_2eproto;
};
// -------------------------------------------------------------------

class Charm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.playersystems.Charm) */ {
 public:
  inline Charm() : Charm(nullptr) {}
  ~Charm() override;
  explicit PROTOBUF_CONSTEXPR Charm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Charm(const Charm& from);
  Charm(Charm&& from) noexcept
    : Charm() {
    *this = ::std::move(from);
  }

  inline Charm& operator=(const Charm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Charm& operator=(Charm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Charm& default_instance() {
    return *internal_default_instance();
  }
  static inline const Charm* internal_default_instance() {
    return reinterpret_cast<const Charm*>(
               &_Charm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Charm& a, Charm& b) {
    a.Swap(&b);
  }
  inline void Swap(Charm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Charm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Charm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Charm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Charm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Charm& from) {
    Charm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Charm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.playersystems.Charm";
  }
  protected:
  explicit Charm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRaceidFieldNumber = 2,
  };
  // optional .Canary.protobuf.playersystems.CHARM_TYPE type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Canary::protobuf::playersystems::CHARM_TYPE type() const;
  void set_type(::Canary::protobuf::playersystems::CHARM_TYPE value);
  private:
  ::Canary::protobuf::playersystems::CHARM_TYPE _internal_type() const;
  void _internal_set_type(::Canary::protobuf::playersystems::CHARM_TYPE value);
  public:

  // optional uint32 raceid = 2;
  bool has_raceid() const;
  private:
  bool _internal_has_raceid() const;
  public:
  void clear_raceid();
  uint32_t raceid() const;
  void set_raceid(uint32_t value);
  private:
  uint32_t _internal_raceid() const;
  void _internal_set_raceid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.playersystems.Charm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    uint32_t raceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playersystems_2eproto;
};
// -------------------------------------------------------------------

class Prey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.playersystems.Prey) */ {
 public:
  inline Prey() : Prey(nullptr) {}
  ~Prey() override;
  explicit PROTOBUF_CONSTEXPR Prey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Prey(const Prey& from);
  Prey(Prey&& from) noexcept
    : Prey() {
    *this = ::std::move(from);
  }

  inline Prey& operator=(const Prey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prey& operator=(Prey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Prey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Prey* internal_default_instance() {
    return reinterpret_cast<const Prey*>(
               &_Prey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Prey& a, Prey& b) {
    a.Swap(&b);
  }
  inline void Swap(Prey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Prey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Prey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Prey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Prey& from) {
    Prey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.playersystems.Prey";
  }
  protected:
  explicit Prey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridFieldNumber = 10,
    kSlotFieldNumber = 1,
    kStateFieldNumber = 2,
    kRaceidFieldNumber = 3,
    kOptionFieldNumber = 4,
    kBonusTypeFieldNumber = 5,
    kBonusRarityFieldNumber = 6,
    kBonusPercentageFieldNumber = 7,
    kBonusTimeFieldNumber = 8,
    kFreeRerollFieldNumber = 9,
  };
  // repeated uint32 grid = 10;
  int grid_size() const;
  private:
  int _internal_grid_size() const;
  public:
  void clear_grid();
  private:
  uint32_t _internal_grid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_grid() const;
  void _internal_add_grid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_grid();
  public:
  uint32_t grid(int index) const;
  void set_grid(int index, uint32_t value);
  void add_grid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      grid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_grid();

  // optional uint32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // optional uint32 raceid = 3;
  bool has_raceid() const;
  private:
  bool _internal_has_raceid() const;
  public:
  void clear_raceid();
  uint32_t raceid() const;
  void set_raceid(uint32_t value);
  private:
  uint32_t _internal_raceid() const;
  void _internal_set_raceid(uint32_t value);
  public:

  // optional uint32 option = 4;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  uint32_t option() const;
  void set_option(uint32_t value);
  private:
  uint32_t _internal_option() const;
  void _internal_set_option(uint32_t value);
  public:

  // optional uint32 bonus_type = 5;
  bool has_bonus_type() const;
  private:
  bool _internal_has_bonus_type() const;
  public:
  void clear_bonus_type();
  uint32_t bonus_type() const;
  void set_bonus_type(uint32_t value);
  private:
  uint32_t _internal_bonus_type() const;
  void _internal_set_bonus_type(uint32_t value);
  public:

  // optional uint32 bonus_rarity = 6;
  bool has_bonus_rarity() const;
  private:
  bool _internal_has_bonus_rarity() const;
  public:
  void clear_bonus_rarity();
  uint32_t bonus_rarity() const;
  void set_bonus_rarity(uint32_t value);
  private:
  uint32_t _internal_bonus_rarity() const;
  void _internal_set_bonus_rarity(uint32_t value);
  public:

  // optional uint32 bonus_percentage = 7;
  bool has_bonus_percentage() const;
  private:
  bool _internal_has_bonus_percentage() const;
  public:
  void clear_bonus_percentage();
  uint32_t bonus_percentage() const;
  void set_bonus_percentage(uint32_t value);
  private:
  uint32_t _internal_bonus_percentage() const;
  void _internal_set_bonus_percentage(uint32_t value);
  public:

  // optional uint32 bonus_time = 8;
  bool has_bonus_time() const;
  private:
  bool _internal_has_bonus_time() const;
  public:
  void clear_bonus_time();
  uint32_t bonus_time() const;
  void set_bonus_time(uint32_t value);
  private:
  uint32_t _internal_bonus_time() const;
  void _internal_set_bonus_time(uint32_t value);
  public:

  // optional uint64 free_reroll = 9;
  bool has_free_reroll() const;
  private:
  bool _internal_has_free_reroll() const;
  public:
  void clear_free_reroll();
  uint64_t free_reroll() const;
  void set_free_reroll(uint64_t value);
  private:
  uint64_t _internal_free_reroll() const;
  void _internal_set_free_reroll(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.playersystems.Prey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > grid_;
    uint32_t slot_;
    uint32_t state_;
    uint32_t raceid_;
    uint32_t option_;
    uint32_t bonus_type_;
    uint32_t bonus_rarity_;
    uint32_t bonus_percentage_;
    uint32_t bonus_time_;
    uint64_t free_reroll_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playersystems_2eproto;
};
// -------------------------------------------------------------------

class TaskHunting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Canary.protobuf.playersystems.TaskHunting) */ {
 public:
  inline TaskHunting() : TaskHunting(nullptr) {}
  ~TaskHunting() override;
  explicit PROTOBUF_CONSTEXPR TaskHunting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskHunting(const TaskHunting& from);
  TaskHunting(TaskHunting&& from) noexcept
    : TaskHunting() {
    *this = ::std::move(from);
  }

  inline TaskHunting& operator=(const TaskHunting& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskHunting& operator=(TaskHunting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskHunting& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskHunting* internal_default_instance() {
    return reinterpret_cast<const TaskHunting*>(
               &_TaskHunting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskHunting& a, TaskHunting& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskHunting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskHunting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskHunting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskHunting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskHunting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TaskHunting& from) {
    TaskHunting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskHunting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Canary.protobuf.playersystems.TaskHunting";
  }
  protected:
  explicit TaskHunting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGridFieldNumber = 9,
    kSlotFieldNumber = 1,
    kStateFieldNumber = 2,
    kRaceidFieldNumber = 3,
    kUpgradeFieldNumber = 4,
    kRarityFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDisableTimeFieldNumber = 7,
    kFreeRerollFieldNumber = 8,
  };
  // repeated uint32 grid = 9;
  int grid_size() const;
  private:
  int _internal_grid_size() const;
  public:
  void clear_grid();
  private:
  uint32_t _internal_grid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_grid() const;
  void _internal_add_grid(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_grid();
  public:
  uint32_t grid(int index) const;
  void set_grid(int index, uint32_t value);
  void add_grid(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      grid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_grid();

  // optional uint32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 state = 2;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // optional uint32 raceid = 3;
  bool has_raceid() const;
  private:
  bool _internal_has_raceid() const;
  public:
  void clear_raceid();
  uint32_t raceid() const;
  void set_raceid(uint32_t value);
  private:
  uint32_t _internal_raceid() const;
  void _internal_set_raceid(uint32_t value);
  public:

  // optional bool upgrade = 4;
  bool has_upgrade() const;
  private:
  bool _internal_has_upgrade() const;
  public:
  void clear_upgrade();
  bool upgrade() const;
  void set_upgrade(bool value);
  private:
  bool _internal_upgrade() const;
  void _internal_set_upgrade(bool value);
  public:

  // optional uint32 rarity = 5;
  bool has_rarity() const;
  private:
  bool _internal_has_rarity() const;
  public:
  void clear_rarity();
  uint32_t rarity() const;
  void set_rarity(uint32_t value);
  private:
  uint32_t _internal_rarity() const;
  void _internal_set_rarity(uint32_t value);
  public:

  // optional uint32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint64 disable_time = 7;
  bool has_disable_time() const;
  private:
  bool _internal_has_disable_time() const;
  public:
  void clear_disable_time();
  uint64_t disable_time() const;
  void set_disable_time(uint64_t value);
  private:
  uint64_t _internal_disable_time() const;
  void _internal_set_disable_time(uint64_t value);
  public:

  // optional uint64 free_reroll = 8;
  bool has_free_reroll() const;
  private:
  bool _internal_has_free_reroll() const;
  public:
  void clear_free_reroll();
  uint64_t free_reroll() const;
  void set_free_reroll(uint64_t value);
  private:
  uint64_t _internal_free_reroll() const;
  void _internal_set_free_reroll(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Canary.protobuf.playersystems.TaskHunting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > grid_;
    uint32_t slot_;
    uint32_t state_;
    uint32_t raceid_;
    bool upgrade_;
    uint32_t rarity_;
    uint32_t kills_;
    uint64_t disable_time_;
    uint64_t free_reroll_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_playersystems_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerSystems

// repeated .Canary.protobuf.playersystems.Charm charms = 1;
inline int PlayerSystems::_internal_charms_size() const {
  return _impl_.charms_.size();
}
inline int PlayerSystems::charms_size() const {
  return _internal_charms_size();
}
inline void PlayerSystems::clear_charms() {
  _impl_.charms_.Clear();
}
inline ::Canary::protobuf::playersystems::Charm* PlayerSystems::mutable_charms(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.playersystems.PlayerSystems.charms)
  return _impl_.charms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Charm >*
PlayerSystems::mutable_charms() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.PlayerSystems.charms)
  return &_impl_.charms_;
}
inline const ::Canary::protobuf::playersystems::Charm& PlayerSystems::_internal_charms(int index) const {
  return _impl_.charms_.Get(index);
}
inline const ::Canary::protobuf::playersystems::Charm& PlayerSystems::charms(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.PlayerSystems.charms)
  return _internal_charms(index);
}
inline ::Canary::protobuf::playersystems::Charm* PlayerSystems::_internal_add_charms() {
  return _impl_.charms_.Add();
}
inline ::Canary::protobuf::playersystems::Charm* PlayerSystems::add_charms() {
  ::Canary::protobuf::playersystems::Charm* _add = _internal_add_charms();
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.PlayerSystems.charms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Charm >&
PlayerSystems::charms() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.PlayerSystems.charms)
  return _impl_.charms_;
}

// repeated .Canary.protobuf.playersystems.Prey prey = 2;
inline int PlayerSystems::_internal_prey_size() const {
  return _impl_.prey_.size();
}
inline int PlayerSystems::prey_size() const {
  return _internal_prey_size();
}
inline void PlayerSystems::clear_prey() {
  _impl_.prey_.Clear();
}
inline ::Canary::protobuf::playersystems::Prey* PlayerSystems::mutable_prey(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.playersystems.PlayerSystems.prey)
  return _impl_.prey_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Prey >*
PlayerSystems::mutable_prey() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.PlayerSystems.prey)
  return &_impl_.prey_;
}
inline const ::Canary::protobuf::playersystems::Prey& PlayerSystems::_internal_prey(int index) const {
  return _impl_.prey_.Get(index);
}
inline const ::Canary::protobuf::playersystems::Prey& PlayerSystems::prey(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.PlayerSystems.prey)
  return _internal_prey(index);
}
inline ::Canary::protobuf::playersystems::Prey* PlayerSystems::_internal_add_prey() {
  return _impl_.prey_.Add();
}
inline ::Canary::protobuf::playersystems::Prey* PlayerSystems::add_prey() {
  ::Canary::protobuf::playersystems::Prey* _add = _internal_add_prey();
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.PlayerSystems.prey)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::Prey >&
PlayerSystems::prey() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.PlayerSystems.prey)
  return _impl_.prey_;
}

// repeated .Canary.protobuf.playersystems.TaskHunting task_hunting = 3;
inline int PlayerSystems::_internal_task_hunting_size() const {
  return _impl_.task_hunting_.size();
}
inline int PlayerSystems::task_hunting_size() const {
  return _internal_task_hunting_size();
}
inline void PlayerSystems::clear_task_hunting() {
  _impl_.task_hunting_.Clear();
}
inline ::Canary::protobuf::playersystems::TaskHunting* PlayerSystems::mutable_task_hunting(int index) {
  // @@protoc_insertion_point(field_mutable:Canary.protobuf.playersystems.PlayerSystems.task_hunting)
  return _impl_.task_hunting_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::TaskHunting >*
PlayerSystems::mutable_task_hunting() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.PlayerSystems.task_hunting)
  return &_impl_.task_hunting_;
}
inline const ::Canary::protobuf::playersystems::TaskHunting& PlayerSystems::_internal_task_hunting(int index) const {
  return _impl_.task_hunting_.Get(index);
}
inline const ::Canary::protobuf::playersystems::TaskHunting& PlayerSystems::task_hunting(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.PlayerSystems.task_hunting)
  return _internal_task_hunting(index);
}
inline ::Canary::protobuf::playersystems::TaskHunting* PlayerSystems::_internal_add_task_hunting() {
  return _impl_.task_hunting_.Add();
}
inline ::Canary::protobuf::playersystems::TaskHunting* PlayerSystems::add_task_hunting() {
  ::Canary::protobuf::playersystems::TaskHunting* _add = _internal_add_task_hunting();
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.PlayerSystems.task_hunting)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Canary::protobuf::playersystems::TaskHunting >&
PlayerSystems::task_hunting() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.PlayerSystems.task_hunting)
  return _impl_.task_hunting_;
}

// repeated uint32 bestiary_tracker = 4;
inline int PlayerSystems::_internal_bestiary_tracker_size() const {
  return _impl_.bestiary_tracker_.size();
}
inline int PlayerSystems::bestiary_tracker_size() const {
  return _internal_bestiary_tracker_size();
}
inline void PlayerSystems::clear_bestiary_tracker() {
  _impl_.bestiary_tracker_.Clear();
}
inline uint32_t PlayerSystems::_internal_bestiary_tracker(int index) const {
  return _impl_.bestiary_tracker_.Get(index);
}
inline uint32_t PlayerSystems::bestiary_tracker(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.PlayerSystems.bestiary_tracker)
  return _internal_bestiary_tracker(index);
}
inline void PlayerSystems::set_bestiary_tracker(int index, uint32_t value) {
  _impl_.bestiary_tracker_.Set(index, value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.PlayerSystems.bestiary_tracker)
}
inline void PlayerSystems::_internal_add_bestiary_tracker(uint32_t value) {
  _impl_.bestiary_tracker_.Add(value);
}
inline void PlayerSystems::add_bestiary_tracker(uint32_t value) {
  _internal_add_bestiary_tracker(value);
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.PlayerSystems.bestiary_tracker)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PlayerSystems::_internal_bestiary_tracker() const {
  return _impl_.bestiary_tracker_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
PlayerSystems::bestiary_tracker() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.PlayerSystems.bestiary_tracker)
  return _internal_bestiary_tracker();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PlayerSystems::_internal_mutable_bestiary_tracker() {
  return &_impl_.bestiary_tracker_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
PlayerSystems::mutable_bestiary_tracker() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.PlayerSystems.bestiary_tracker)
  return _internal_mutable_bestiary_tracker();
}

// -------------------------------------------------------------------

// Charm

// optional .Canary.protobuf.playersystems.CHARM_TYPE type = 1;
inline bool Charm::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Charm::has_type() const {
  return _internal_has_type();
}
inline void Charm::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Canary::protobuf::playersystems::CHARM_TYPE Charm::_internal_type() const {
  return static_cast< ::Canary::protobuf::playersystems::CHARM_TYPE >(_impl_.type_);
}
inline ::Canary::protobuf::playersystems::CHARM_TYPE Charm::type() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Charm.type)
  return _internal_type();
}
inline void Charm::_internal_set_type(::Canary::protobuf::playersystems::CHARM_TYPE value) {
  assert(::Canary::protobuf::playersystems::CHARM_TYPE_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void Charm::set_type(::Canary::protobuf::playersystems::CHARM_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Charm.type)
}

// optional uint32 raceid = 2;
inline bool Charm::_internal_has_raceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Charm::has_raceid() const {
  return _internal_has_raceid();
}
inline void Charm::clear_raceid() {
  _impl_.raceid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Charm::_internal_raceid() const {
  return _impl_.raceid_;
}
inline uint32_t Charm::raceid() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Charm.raceid)
  return _internal_raceid();
}
inline void Charm::_internal_set_raceid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.raceid_ = value;
}
inline void Charm::set_raceid(uint32_t value) {
  _internal_set_raceid(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Charm.raceid)
}

// -------------------------------------------------------------------

// Prey

// optional uint32 slot = 1;
inline bool Prey::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prey::has_slot() const {
  return _internal_has_slot();
}
inline void Prey::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Prey::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t Prey::slot() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.slot)
  return _internal_slot();
}
inline void Prey::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_ = value;
}
inline void Prey::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.slot)
}

// optional uint32 state = 2;
inline bool Prey::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prey::has_state() const {
  return _internal_has_state();
}
inline void Prey::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Prey::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t Prey::state() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.state)
  return _internal_state();
}
inline void Prey::_internal_set_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void Prey::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.state)
}

// optional uint32 raceid = 3;
inline bool Prey::_internal_has_raceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Prey::has_raceid() const {
  return _internal_has_raceid();
}
inline void Prey::clear_raceid() {
  _impl_.raceid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Prey::_internal_raceid() const {
  return _impl_.raceid_;
}
inline uint32_t Prey::raceid() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.raceid)
  return _internal_raceid();
}
inline void Prey::_internal_set_raceid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.raceid_ = value;
}
inline void Prey::set_raceid(uint32_t value) {
  _internal_set_raceid(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.raceid)
}

// optional uint32 option = 4;
inline bool Prey::_internal_has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Prey::has_option() const {
  return _internal_has_option();
}
inline void Prey::clear_option() {
  _impl_.option_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Prey::_internal_option() const {
  return _impl_.option_;
}
inline uint32_t Prey::option() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.option)
  return _internal_option();
}
inline void Prey::_internal_set_option(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.option_ = value;
}
inline void Prey::set_option(uint32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.option)
}

// optional uint32 bonus_type = 5;
inline bool Prey::_internal_has_bonus_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Prey::has_bonus_type() const {
  return _internal_has_bonus_type();
}
inline void Prey::clear_bonus_type() {
  _impl_.bonus_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Prey::_internal_bonus_type() const {
  return _impl_.bonus_type_;
}
inline uint32_t Prey::bonus_type() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.bonus_type)
  return _internal_bonus_type();
}
inline void Prey::_internal_set_bonus_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bonus_type_ = value;
}
inline void Prey::set_bonus_type(uint32_t value) {
  _internal_set_bonus_type(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.bonus_type)
}

// optional uint32 bonus_rarity = 6;
inline bool Prey::_internal_has_bonus_rarity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Prey::has_bonus_rarity() const {
  return _internal_has_bonus_rarity();
}
inline void Prey::clear_bonus_rarity() {
  _impl_.bonus_rarity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Prey::_internal_bonus_rarity() const {
  return _impl_.bonus_rarity_;
}
inline uint32_t Prey::bonus_rarity() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.bonus_rarity)
  return _internal_bonus_rarity();
}
inline void Prey::_internal_set_bonus_rarity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bonus_rarity_ = value;
}
inline void Prey::set_bonus_rarity(uint32_t value) {
  _internal_set_bonus_rarity(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.bonus_rarity)
}

// optional uint32 bonus_percentage = 7;
inline bool Prey::_internal_has_bonus_percentage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Prey::has_bonus_percentage() const {
  return _internal_has_bonus_percentage();
}
inline void Prey::clear_bonus_percentage() {
  _impl_.bonus_percentage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Prey::_internal_bonus_percentage() const {
  return _impl_.bonus_percentage_;
}
inline uint32_t Prey::bonus_percentage() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.bonus_percentage)
  return _internal_bonus_percentage();
}
inline void Prey::_internal_set_bonus_percentage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.bonus_percentage_ = value;
}
inline void Prey::set_bonus_percentage(uint32_t value) {
  _internal_set_bonus_percentage(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.bonus_percentage)
}

// optional uint32 bonus_time = 8;
inline bool Prey::_internal_has_bonus_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Prey::has_bonus_time() const {
  return _internal_has_bonus_time();
}
inline void Prey::clear_bonus_time() {
  _impl_.bonus_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Prey::_internal_bonus_time() const {
  return _impl_.bonus_time_;
}
inline uint32_t Prey::bonus_time() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.bonus_time)
  return _internal_bonus_time();
}
inline void Prey::_internal_set_bonus_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.bonus_time_ = value;
}
inline void Prey::set_bonus_time(uint32_t value) {
  _internal_set_bonus_time(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.bonus_time)
}

// optional uint64 free_reroll = 9;
inline bool Prey::_internal_has_free_reroll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Prey::has_free_reroll() const {
  return _internal_has_free_reroll();
}
inline void Prey::clear_free_reroll() {
  _impl_.free_reroll_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t Prey::_internal_free_reroll() const {
  return _impl_.free_reroll_;
}
inline uint64_t Prey::free_reroll() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.free_reroll)
  return _internal_free_reroll();
}
inline void Prey::_internal_set_free_reroll(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.free_reroll_ = value;
}
inline void Prey::set_free_reroll(uint64_t value) {
  _internal_set_free_reroll(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.free_reroll)
}

// repeated uint32 grid = 10;
inline int Prey::_internal_grid_size() const {
  return _impl_.grid_.size();
}
inline int Prey::grid_size() const {
  return _internal_grid_size();
}
inline void Prey::clear_grid() {
  _impl_.grid_.Clear();
}
inline uint32_t Prey::_internal_grid(int index) const {
  return _impl_.grid_.Get(index);
}
inline uint32_t Prey::grid(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.Prey.grid)
  return _internal_grid(index);
}
inline void Prey::set_grid(int index, uint32_t value) {
  _impl_.grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.Prey.grid)
}
inline void Prey::_internal_add_grid(uint32_t value) {
  _impl_.grid_.Add(value);
}
inline void Prey::add_grid(uint32_t value) {
  _internal_add_grid(value);
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.Prey.grid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Prey::_internal_grid() const {
  return _impl_.grid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Prey::grid() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.Prey.grid)
  return _internal_grid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Prey::_internal_mutable_grid() {
  return &_impl_.grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Prey::mutable_grid() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.Prey.grid)
  return _internal_mutable_grid();
}

// -------------------------------------------------------------------

// TaskHunting

// optional uint32 slot = 1;
inline bool TaskHunting::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskHunting::has_slot() const {
  return _internal_has_slot();
}
inline void TaskHunting::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t TaskHunting::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t TaskHunting::slot() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.slot)
  return _internal_slot();
}
inline void TaskHunting::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_ = value;
}
inline void TaskHunting::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.slot)
}

// optional uint32 state = 2;
inline bool TaskHunting::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskHunting::has_state() const {
  return _internal_has_state();
}
inline void TaskHunting::clear_state() {
  _impl_.state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TaskHunting::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t TaskHunting::state() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.state)
  return _internal_state();
}
inline void TaskHunting::_internal_set_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void TaskHunting::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.state)
}

// optional uint32 raceid = 3;
inline bool TaskHunting::_internal_has_raceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TaskHunting::has_raceid() const {
  return _internal_has_raceid();
}
inline void TaskHunting::clear_raceid() {
  _impl_.raceid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TaskHunting::_internal_raceid() const {
  return _impl_.raceid_;
}
inline uint32_t TaskHunting::raceid() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.raceid)
  return _internal_raceid();
}
inline void TaskHunting::_internal_set_raceid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.raceid_ = value;
}
inline void TaskHunting::set_raceid(uint32_t value) {
  _internal_set_raceid(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.raceid)
}

// optional bool upgrade = 4;
inline bool TaskHunting::_internal_has_upgrade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TaskHunting::has_upgrade() const {
  return _internal_has_upgrade();
}
inline void TaskHunting::clear_upgrade() {
  _impl_.upgrade_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TaskHunting::_internal_upgrade() const {
  return _impl_.upgrade_;
}
inline bool TaskHunting::upgrade() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.upgrade)
  return _internal_upgrade();
}
inline void TaskHunting::_internal_set_upgrade(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.upgrade_ = value;
}
inline void TaskHunting::set_upgrade(bool value) {
  _internal_set_upgrade(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.upgrade)
}

// optional uint32 rarity = 5;
inline bool TaskHunting::_internal_has_rarity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TaskHunting::has_rarity() const {
  return _internal_has_rarity();
}
inline void TaskHunting::clear_rarity() {
  _impl_.rarity_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t TaskHunting::_internal_rarity() const {
  return _impl_.rarity_;
}
inline uint32_t TaskHunting::rarity() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.rarity)
  return _internal_rarity();
}
inline void TaskHunting::_internal_set_rarity(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rarity_ = value;
}
inline void TaskHunting::set_rarity(uint32_t value) {
  _internal_set_rarity(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.rarity)
}

// optional uint32 kills = 6;
inline bool TaskHunting::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TaskHunting::has_kills() const {
  return _internal_has_kills();
}
inline void TaskHunting::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TaskHunting::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t TaskHunting::kills() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.kills)
  return _internal_kills();
}
inline void TaskHunting::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void TaskHunting::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.kills)
}

// optional uint64 disable_time = 7;
inline bool TaskHunting::_internal_has_disable_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TaskHunting::has_disable_time() const {
  return _internal_has_disable_time();
}
inline void TaskHunting::clear_disable_time() {
  _impl_.disable_time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t TaskHunting::_internal_disable_time() const {
  return _impl_.disable_time_;
}
inline uint64_t TaskHunting::disable_time() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.disable_time)
  return _internal_disable_time();
}
inline void TaskHunting::_internal_set_disable_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.disable_time_ = value;
}
inline void TaskHunting::set_disable_time(uint64_t value) {
  _internal_set_disable_time(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.disable_time)
}

// optional uint64 free_reroll = 8;
inline bool TaskHunting::_internal_has_free_reroll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TaskHunting::has_free_reroll() const {
  return _internal_has_free_reroll();
}
inline void TaskHunting::clear_free_reroll() {
  _impl_.free_reroll_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t TaskHunting::_internal_free_reroll() const {
  return _impl_.free_reroll_;
}
inline uint64_t TaskHunting::free_reroll() const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.free_reroll)
  return _internal_free_reroll();
}
inline void TaskHunting::_internal_set_free_reroll(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.free_reroll_ = value;
}
inline void TaskHunting::set_free_reroll(uint64_t value) {
  _internal_set_free_reroll(value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.free_reroll)
}

// repeated uint32 grid = 9;
inline int TaskHunting::_internal_grid_size() const {
  return _impl_.grid_.size();
}
inline int TaskHunting::grid_size() const {
  return _internal_grid_size();
}
inline void TaskHunting::clear_grid() {
  _impl_.grid_.Clear();
}
inline uint32_t TaskHunting::_internal_grid(int index) const {
  return _impl_.grid_.Get(index);
}
inline uint32_t TaskHunting::grid(int index) const {
  // @@protoc_insertion_point(field_get:Canary.protobuf.playersystems.TaskHunting.grid)
  return _internal_grid(index);
}
inline void TaskHunting::set_grid(int index, uint32_t value) {
  _impl_.grid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Canary.protobuf.playersystems.TaskHunting.grid)
}
inline void TaskHunting::_internal_add_grid(uint32_t value) {
  _impl_.grid_.Add(value);
}
inline void TaskHunting::add_grid(uint32_t value) {
  _internal_add_grid(value);
  // @@protoc_insertion_point(field_add:Canary.protobuf.playersystems.TaskHunting.grid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TaskHunting::_internal_grid() const {
  return _impl_.grid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TaskHunting::grid() const {
  // @@protoc_insertion_point(field_list:Canary.protobuf.playersystems.TaskHunting.grid)
  return _internal_grid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TaskHunting::_internal_mutable_grid() {
  return &_impl_.grid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TaskHunting::mutable_grid() {
  // @@protoc_insertion_point(field_mutable_list:Canary.protobuf.playersystems.TaskHunting.grid)
  return _internal_mutable_grid();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace playersystems
}  // namespace protobuf
}  // namespace Canary

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Canary::protobuf::playersystems::CHARM_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Canary::protobuf::playersystems::CHARM_TYPE>() {
  return ::Canary::protobuf::playersystems::CHARM_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_playersystems_2eproto
